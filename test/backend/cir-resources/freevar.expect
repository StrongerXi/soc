closure <closure_39> = {
  args = (native_arg_38, native_arg_37)
  free_vars = ()
  body = {
    (<native:equal> native_arg_38 native_arg_37)
  }
}
closure <closure_36> = {
  args = (native_arg_35)
  free_vars = ()
  body = {
    (<native:print> native_arg_35)
  }
}
closure <closure_34> = {
  args = (prim_arg_33, prim_arg_32)
  free_vars = ()
  body = {
    (+ prim_arg_33 prim_arg_32)
  }
}
closure <closure_31> = {
  args = (prim_arg_30, prim_arg_29)
  free_vars = ()
  body = {
    (- prim_arg_30 prim_arg_29)
  }
}
closure <closure_28> = {
  args = (prim_arg_27, prim_arg_26)
  free_vars = ()
  body = {
    (* prim_arg_27 prim_arg_26)
  }
}
closure <closure_25> = {
  args = (prim_arg_24, prim_arg_23)
  free_vars = ()
  body = {
    (< prim_arg_24 prim_arg_23)
  }
}
closure <closure_22> = {
  args = (prim_arg_21, prim_arg_20)
  free_vars = ()
  body = {
    (|| prim_arg_21 prim_arg_20)
  }
}
closure <closure_19> = {
  args = (prim_arg_18, prim_arg_17)
  free_vars = ()
  body = {
    (&& prim_arg_18 prim_arg_17)
  }
}
closure <closure_16> = {
  args = (x_2)
  free_vars = (g_0)
  body = {
    (g_0 x_2)
  }
}
closure <closure_15> = {
  args = (x_3)
  free_vars = (f_1)
  body = {
    (f_1 x_3)
  }
}
closure <closure_14> = {
  args = (x_5, y_6, z_7)
  free_vars = (+)
  body = {
    (MK_CLOSURE <closure_13> y_6 +)
  }
}
closure <closure_13> = {
  args = (x_8)
  free_vars = (y_6, +)
  body = {
    (MK_CLOSURE <closure_12> y_6 x_8 +)
  }
}
closure <closure_12> = {
  args = (a_9, b_10, c_11)
  free_vars = (y_6, x_8, +)
  body = {
    (+ (+ x_8 a_9) y_6)
  }
}
let + = (MK_CLOSURE <closure_34> )
    - = (MK_CLOSURE <closure_31> )
    * = (MK_CLOSURE <closure_28> )
    < = (MK_CLOSURE <closure_25> )
    || = (MK_CLOSURE <closure_22> )
    && = (MK_CLOSURE <closure_19> )
    = = (MK_CLOSURE <closure_39> )
    print = (MK_CLOSURE <closure_36> )
in let rec f_1 = (MK_CLOSURE <closure_16> g_0)
           g_0 = (MK_CLOSURE <closure_15> f_1)
   in let f1_4 = (MK_CLOSURE <closure_14> +)
      in 42